import heapq
import math

class Node:
    def __init__(self, position, parent=None):
        self.position = position
        self.parent = parent
        self.g = 0  # 从起点到当前节点的实际成本
        self.h = 0  # 启发式估计的成本
        self.f = 0  # 总成本 (g + h)
    
    def __lt__(self, other):
        return self.f < other.f

def a_star(start, goal, grid):
    # 创建开放和关闭列表
    open_list = []
    closed_list = set()
    
    # 创建起点和终点节点
    start_node = Node(start)
    goal_node = Node(goal)
    
    # 将起点加入开放列表
    heapq.heappush(open_list, start_node)
    
    # 定义可能的移动方向（8邻域）
    directions = [(-1, -1), (-1, 0), (-1, 1),
                  (0, -1),          (0, 1),
                  (1, -1),  (1, 0), (1, 1)]
    
    while open_list:
        # 获取当前节点
        current_node = heapq.heappop(open_list)
        closed_list.add(current_node.position)
        
        # 检查是否到达目标
        if current_node.position == goal_node.position:
            path = []
            while current_node:
                path.append(current_node.position)
                current_node = current_node.parent
            return path[::-1]  # 返回反转的路径
        
        # 生成相邻节点
        for direction in directions:
            neighbor_pos = (current_node.position[0] + direction[0],
                            current_node.position[1] + direction[1])
            
            # 检查是否在网格范围内且可通行
            if (0 <= neighbor_pos[0] < len(grid) and 
                0 <= neighbor_pos[1] < len(grid[0]) and 
                grid[neighbor_pos[0]][neighbor_pos[1]] == 0):
                
                # 如果已经在关闭列表中，跳过
                if neighbor_pos in closed_list:
                    continue
                
                neighbor = Node(neighbor_pos, current_node)
                
                # 计算g, h, f值
                neighbor.g = current_node.g + math.sqrt(direction[0]**2 + direction[1]**2)
                neighbor.h = math.sqrt((neighbor_pos[0] - goal[0])**2 + 
                                      (neighbor_pos[1] - goal[1])**2)
                neighbor.f = neighbor.g + neighbor.h
                
                # 检查是否在开放列表中且有更低的f值
                in_open = False
                for open_node in open_list:
                    if open_node.position == neighbor_pos and open_node.f <= neighbor.f:
                        in_open = True
                        break
                
                if not in_open:
                    heapq.heappush(open_list, neighbor)
    
    return None  # 没有找到路径

# 示例使用
if __name__ == "__main__":
    # 0表示可通行，1表示障碍物
    grid = [
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    ]
    
    start = (0, 0)
    goal = (7, 6)
    
    path = a_star(start, goal, grid)
    print("A*找到的路径:", path)
